

//=============================File: console.h======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------


#ifndef CONSOLE_H
#define CONSOLE_H

#include <stdbool.h>

/**************** DRAWING **************************/

/* directions in terms of deltas in x / y dimension */
#define LEFT -1
#define RIGHT 1
#define UP -1
#define DOWN 1

#define SCR_LEFT 0
#define SCR_TOP 0

/* Initialize curses, draw initial gamescreen. Refreshes console to terminal. 
 Also stores the requested dimensions of the consoe and tests the terminal for the
 given dimensions.*/
extern bool consoleInit(int reqHeight, int reqWidth, char *image[]);

/* Draws 2d `image' of `height' rows, at curses coordinates `(row, col)'.
   Note: parts of the `image' falling on negative rows are not drawn; each
   row drawn is clipped on the left and right side of the game console (note
   that `col' may be negative, indicating `image' starts to the left of the
   screen and will thus only be partially drawn. Useful for objects that are
   half off the screen  */
extern void consoleDrawImage(int row, int col, char *image[], int height);

/* Clears a 2d `width'x`height' rectangle with spaces.  Upper left hand
   corner is curses coordinate `(row,col)'. */
extern void consoleClearImage(int row, int col, int width, int height);

/* Moves cursor to bottom right corner and refreshes. If this is not done,
   the curses internal buffer (that you have been drawing to) is not dumped
   to screen. */
extern void consoleRefresh(void);

/*  turns off all updates. Can be used to prevent the screen refresh from working, e.g., at game end while threads are all catching up.*/
extern void disableConsole(int disabled);

/* Terminates curses cleanly. */
extern void consoleFinish(void);

/* Puts the given banner in the center of the screen */
void putBanner(const char *);

/* Draws the given string at the given location  */
void putString(char *, int row, int col, int maxlen);

/* Sleeps the given number of 10ms ticks */
void sleepTicks(int ticks);

/* clears the input buffer and then waits for one more key */
void finalKeypress();

/* gets a timespec that represents the time of one tick */
struct timespec getTimeout(int ticks);

#endif /* CONSOLE_H */

//=============================File: frog.h======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------


#ifndef FROG_HEADER
#define FROG_HEADER

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>
#include"console.h"
#include "globals.h"
#include "string.h"
#include "list.h"

#define PLAYER_ANIM_TILES 2
#define PLAYER_HEIGHT 2

#define DEFAULT_FROG_ROW 21
#define DEFAULT_FROG_COL 39


int frog_row;
int frog_col;

int prev_row;
int prev_col;

int frogSleep;
int lives;

char live[2];

static char* PLAYER_GRAPHIC[PLAYER_ANIM_TILES][PLAYER_HEIGHT+1] = {
  {"@@",
   "<>"},
  {"--",
   "<>"}
};

void setUpFrog();
void *drawFrog(void *dummy );
void updateFrogRow(int frogRow);
void updateFrogCol(int frogCol);

#endif
//=============================File: gameController.h======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------


#ifndef GAME_CONTROLLER_HEADER
#define GAME_CONTROLLER_HEADER

#include<stdlib.h>
#include <stdio.h>
#include <sys/select.h>
#include "frog.h"
#include "log.h"
#include "globals.h"

#define GAME_ROWS 24
#define GAME_COLS 80


static char *GAME_BOARD[] = {
"                                   Lives:",
"/------\\          /------\\          /------\\          /------\\          /------\\",
"|      |          |      |          |      |          |      |          |      |",
"+      +----------+      +----------+      +----------+      +----------+      +",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
"",
"",
"" };


pthread_cond_t  lives_cv;

struct logInfo {
    int logRow;
	int logCol;
	int logDirection;
	int numOfTicks;
	int offscreen;
};



extern int lives;
extern char live[2];

extern int frogStopper;
extern int frog_row;
extern int frog_col;

extern int prev_row;
extern int prev_col;

int liveCounter[5];

void startTheGame();

void *runTheGame(void *dummy);

void *refreshByThread(void *dummy);

void *getCharKeyboard();

void *spanRow1();

void *spanRow2();

void *spanRow3();

void *spanRow4();

void *upkeepManager();

#endif

//=============================File: globals.h======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------


#include <pthread.h>
#include <time.h>

pthread_mutexattr_t frog_attributes;
pthread_mutex_t frog_mutex;

pthread_mutexattr_t log_row_attributes;
pthread_mutex_t log_row_mutex;

pthread_mutexattr_t console_attributes;
pthread_mutex_t console_mutex;

pthread_mutexattr_t upkeep_attributes;
pthread_mutex_t upkeep_mutex;

pthread_mutexattr_t keyboard_attributes;
pthread_mutex_t keyboard_mutex;

pthread_mutexattr_t refresh_attributes;
pthread_mutex_t refresh_mutex;

pthread_mutexattr_t join_attributes;
pthread_mutex_t join_mutex;

int gameOver;

//=============================File: list.h======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ìfroggerî.
//
//-----------------------------------------


#include<stdlib.h>
#include "globals.h"
#include "gameController.h"

#ifndef LIST_HEADER
#define LIST_HEADER

static struct node *head=NULL;
extern int frog_row;
extern int frog_col;


struct node
{
	struct logTiles *logStruct;
	pthread_t pthreadJoiner;
	struct node *next;
};

void add(struct logTiles *log, pthread_t pthreadId);

int hasWon();
void removeDeadLogs();
void cleanUp();
int validPosition();

#endif
//=============================File: log.h======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------


#ifndef LOG_HEADER
#define LOG_HEADER

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>
#include <string.h>
#include <unistd.h>
#include "frog.h"

#define LOG_ANIM_TILES 6
#define LOG_HEIGHT 4


typedef struct logTiles
{
		int logRow;
		int logCol;
		int direction;	//1 means from left to right & 0 means from right to left
		int offscreen;	//1 means offscreen so can be deleted & 0 means still on screen
		int numOfTicks;	//number of ticks that the log will sleep
}logs;



extern int frog_row;
extern int frog_col;

extern int prev_row;
extern int prev_col;

static char* log[LOG_ANIM_TILES][LOG_HEIGHT+1] ={
  {"/===================\\",
   "|                   |",
   "|                   |",
   "\\===================/"},
   {"/===================\\",
   "- x                 +",
   "-    x              +",
   "\\===================/"},
   {"/===================\\",
   "|      x            +",
   "|   x               +",
   "\\===================/"},
   {"/===================\\",
   "-      x            |",
   "-         x         |",
   "\\===================/"},
   {"/===================\\",
   "+            x      |",
   "+         x         |",
   "\\===================/"},
   {"/===================\\",
   "|            x      |",
   "|               x   |",
   "\\===================/"}   
   };

void *drawLog(void *info);
void setUpLog();

#endif

//=============================File: console.c======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------


#include "console.h"
#include <curses.h>
#include <string.h>
#include <time.h>        /*for nano sleep */
#include <stdbool.h>


static int CON_WIDTH, CON_HEIGHT;
static int consoleLock = false;
static int MAX_STR_LEN = 256; /* for strlen checking */

/* Local functions */

static bool checkConsoleSize(int reqHeight, int reqWidth) 
{

	if ( (reqWidth > COLS) || (reqHeight > LINES) ) 
 	{
    		fprintf(stderr, "\n\n\rSorry, your window is only %ix%i. \n\r%ix%i is required. Sorry.\n\r", COLS, LINES, reqWidth, reqHeight);
    		return (false);
  	}

  return(true);
}

bool consoleInit(int height, int width, char *image[])  /* assumes image height/width is same as height param */
{
	bool status;

	initscr();
	crmode();
	noecho();
	clear();

	CON_HEIGHT = height;  CON_WIDTH = width;
	status = checkConsoleSize(CON_HEIGHT, CON_WIDTH);

	if (status) 
	{
		consoleDrawImage(0, 0, image, CON_HEIGHT);
		consoleRefresh();
	}

	return(status);
}

void consoleDrawImage(int row, int col, char *image[], int height) 
{
	int i, length;
	int newLeft, newRight, newOffset, newLength;

	if (consoleLock) return;

	newLeft  = col < 0 ? 0 : col;
	newOffset = col < 0 ? -col : 0;

	for (i = 0; i < height; i++) 
	{
		if (row+i < 0 || row+i >= CON_HEIGHT)
			continue;
		length = strnlen(image[i], MAX_STR_LEN);
		newRight = col+length >= CON_WIDTH ? CON_WIDTH-1 : col+length;
		newLength = newRight - newLeft + 1;
		if (newOffset >= length || newLength <= 0)
		  continue;

		if (mvaddnstr(row+i, newLeft, image[i]+newOffset, newLength) == ERR)
			fprintf(stderr, "ERROR drawing to screen"); /* smarter handling is needed */
	}
}

void consoleClearImage(int row, int col, int height, int width) 
{
	int i, j;
	if (consoleLock) return;

	if (col+width > CON_WIDTH)
		width = CON_WIDTH-col;
	if (col < 0) 
	{
		width += col; /* -= -col */
		col = 0;
	}

	if (width < 1 || col >= CON_WIDTH) /* nothing to clear */
		return;

	for (i = 0; i < height; i++) 
	{
		if (row+i < 0 || row+i >= CON_HEIGHT)
			continue;
		move(row+i, col);
		for (j = 0; j < width; j++)
	    		addch(' ');
	}
}

void consoleRefresh(void)
{
	if (!consoleLock) 
	{
	    move(LINES-1, COLS-1);
	    refresh();
	}
}

void consoleFinish(void) 
{
    endwin();
}

void putBanner(const char *str) 
{
  if (consoleLock) return;
  int len;

  len = strnlen(str,MAX_STR_LEN);
  
  move (CON_HEIGHT/2, (CON_WIDTH-len)/2);
  addnstr(str, len);

  consoleRefresh();
}

void putString(char *str, int row, int col, int maxlen) 
{
  if (consoleLock) return;
  move(row, col);
  addnstr(str, maxlen);
}


/* setup to work in USECS, reduces risk of overflow */
/* 10000 usec = 10 ms, or 100fps */
#define TIMESLICE_USEC 10000
#define TIME_USECS_SIZE 1000000
#define USEC_TO_NSEC 1000  
struct timespec getTimeout(int ticks) 
{
  struct timespec rqtp;

  /* work in usecs at first */
  rqtp.tv_nsec = TIMESLICE_USEC * ticks;

  /* handle usec overflow */
  rqtp.tv_sec = rqtp.tv_nsec / TIME_USECS_SIZE;
  rqtp.tv_nsec %= TIME_USECS_SIZE;

  rqtp.tv_nsec *= USEC_TO_NSEC;  /*convert to nsecs */
  return rqtp;
}

void sleepTicks(int ticks) 
{

  if (ticks <= 0)
    return;

  struct timespec rqtp = getTimeout(ticks);
  nanosleep(&rqtp, NULL);
}

#define FINAL_PAUSE 2 
void finalKeypress() 
{
	flushinp();
	sleepTicks(FINAL_PAUSE);
    	move(LINES-1, COLS-1);
	getch(); /* wait for user to press a character, blocking. */
}

void disableConsole(int disabled) 
{
	consoleLock = disabled;
}

//=============================File: frog.c======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------



#include"frog.h"

//sets up and initializes the mutex
void setUpFrog()
{
	pthread_mutexattr_settype(&frog_attributes, PTHREAD_MUTEX_RECURSIVE);
    pthread_mutex_init(&frog_mutex, &frog_attributes);
}

//draws the frog into the buffer with animation
void *drawFrog(void *dummy )
{
	setUpFrog();
	updateFrogRow(DEFAULT_FROG_ROW);
	updateFrogCol(DEFAULT_FROG_COL);
	prev_row=frog_row;
	prev_col=frog_col;	
	frogSleep=30;
	
	while(!gameOver)
	{
		int i;
		char** tile = PLAYER_GRAPHIC[0];
		for (i = 0; i<PLAYER_ANIM_TILES; i++)
		{
			pthread_mutex_lock(&console_mutex);
			tile = PLAYER_GRAPHIC[i];			
			consoleClearImage(prev_row,prev_col,PLAYER_HEIGHT, strlen(tile[i]));				
			consoleDrawImage(frog_row, frog_col, tile, PLAYER_HEIGHT);
			int returnPos=validPosition();
			pthread_mutex_unlock(&console_mutex);
			if(returnPos==0)	//meaning the frog is in one of the deadzone and so will decrease live
			{
				sleepTicks(5);
				pthread_mutex_lock(&console_mutex);
				sleepTicks(100);
				pthread_mutex_unlock(&console_mutex);
				updateFrogRow(DEFAULT_FROG_ROW);
				updateFrogCol(DEFAULT_FROG_COL);
				prev_row=frog_row;
				prev_col=frog_col;
				pthread_mutex_lock(&upkeep_mutex);
				lives=lives-1;								
				pthread_mutex_unlock(&upkeep_mutex);
			}
			else if(returnPos==2)	//meaning the frog is in one of it's home boxes
			{
				sleepTicks(50);
				updateFrogRow(DEFAULT_FROG_ROW);
				updateFrogCol(DEFAULT_FROG_COL);
				prev_row=frog_row;
				prev_col=frog_col;
			}
			prev_row=frog_row;
			prev_col=frog_col;
			sleepTicks(frogSleep);
		}
	}
	consoleFinish();        
	pthread_exit(NULL);
}

//updates the frog row value surrounding it with frog mutex
void updateFrogRow(int frogRow)
{
	pthread_mutex_lock(&frog_mutex);
	frog_row=frogRow;
	pthread_mutex_unlock(&frog_mutex);
}

//updates the frog column value surrounding it with frog mutex
void updateFrogCol(int frogCol)
{
	pthread_mutex_lock(&frog_mutex);
	frog_col=frogCol;
	pthread_mutex_unlock(&frog_mutex);
}
//=============================File: gameController.c======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------



#include "gameController.h"

//This method initializes everything and creates a thread that starts different component threads of the game
void startTheGame()
{
	gameOver=0;
	pthread_t gameStarter;	
	pthread_cond_init (&lives_cv, NULL);
	int rc;	
	rc = pthread_create(&gameStarter, NULL, runTheGame, NULL);
	 if (rc){
	   printf("ERROR-return code from pthread_create() is %d\n", rc);
	   exit(-1);
	 }
	 
	 
	 while(!gameOver)
	 {
		pthread_mutex_lock(&upkeep_mutex);
		pthread_cond_wait(&lives_cv, &upkeep_mutex);
		pthread_mutex_unlock(&upkeep_mutex);
	 }	 
	 cleanUp();	 
	 rc = pthread_join(gameStarter, NULL);
	 if (rc){
	   printf("ERROR-return code from pthread_join() for gameStarter is %d\n", rc);
	   exit(-1);
	 }
	 finalKeypress(); /* wait for final key before killing curses and game */	 
}


//This function starts differnt pupose threads to run the game
void *runTheGame(void *dummy)
{
	if(consoleInit(GAME_ROWS, GAME_COLS, GAME_BOARD))
	{				
		pthread_t upkeep;
		int rc = pthread_create(&upkeep, NULL, upkeepManager, NULL);
		if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		}
				
		pthread_t frogThread;
		rc = pthread_create(&frogThread, NULL, drawFrog, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		 }
		 
		pthread_t runRow1;
		rc = pthread_create(&runRow1, NULL, spanRow1, NULL);
		if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		}
		pthread_t runRow2;
		rc = pthread_create(&runRow2, NULL, spanRow2, NULL);
		if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		}  
		   pthread_t runRow3;
		rc = pthread_create(&runRow3, NULL, spanRow3, NULL);
		if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		}
		pthread_t runRow4;
		rc = pthread_create(&runRow4, NULL, spanRow4, NULL);
		if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		}
		 pthread_t refresh;
		 rc = pthread_create(&refresh, NULL, refreshByThread, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		 }
		 
		 pthread_t keyboard;	
		 rc = pthread_create(&keyboard, NULL, getCharKeyboard, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		 }
			
		 //Pthread joiners
		 rc = pthread_join(upkeep, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_join() for upkeep thread is %d\n", rc);
		   exit(-1);
		 }
		 rc = pthread_join(frogThread, NULL);		 
		 if (rc){
		   printf("ERROR-return code from pthread_join() for frog thread is %d\n", rc);
		   exit(-1);
		 }
		 
		 rc = pthread_join(refresh, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_join() for refresh thread is %d\n", rc);
		   exit(-1);
		 }
		
		 rc = pthread_join(keyboard, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_join() for keyboard is %d\n", rc);
		   exit(-1);
		 }
		 
		 rc = pthread_join(runRow1, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_join() for runRow1 is %d\n", rc);
		   exit(-1);
		 }
		 
		 rc = pthread_join(runRow2, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_join() for runRow2 is %d\n", rc);
		   exit(-1);
		 }
		 
		 rc = pthread_join(runRow3, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_join() for runRow3 is %d\n", rc);
		   exit(-1);
		 }	 
		 rc = pthread_join(runRow4, NULL);
		 if (rc){
		   printf("ERROR-return code from pthread_join() for runRow4 is %d\n", rc);
		   exit(-1);
		 }
		 
	}
	pthread_exit(NULL);
}

void *refreshByThread(void *dummy)
{	
	while(!gameOver)
	{
		sleepTicks(3);		
		pthread_mutex_lock(&console_mutex);
		consoleRefresh();
		pthread_mutex_unlock(&console_mutex);		
	}
	pthread_exit(NULL);
}


void *upkeepManager()
{
	lives=4;
	sprintf(live,"%d",lives);	
	int prevLive=live[0]-'0';	
	int prev=lives;
	while(lives>0)
	{
		sleepTicks(2);		
		if(hasWon())
		{
			pthread_mutex_lock(&console_mutex);
			putBanner("Yeppiii You won the game!");
			pthread_mutex_unlock(&console_mutex);
			pthread_cond_signal(&lives_cv);
			gameOver=1;	
			lives=0;
		}
		else
		{			
			pthread_mutex_lock(&upkeep_mutex);
			pthread_mutex_lock(&console_mutex);			
			sprintf(live,"%d",lives);
			if(lives!=0)
			{
				putString(live, 0, 41, 1);
			}
			pthread_mutex_unlock(&console_mutex);
			pthread_mutex_unlock(&upkeep_mutex);
		}		
		pthread_mutex_lock(&upkeep_mutex);
		prev=lives;
		pthread_mutex_unlock(&upkeep_mutex);
		removeDeadLogs();
	}
	removeDeadLogs();	
	gameOver=1;	
	pthread_mutex_lock(&console_mutex);
	putBanner("Game Over! Do or do not there's no try!");
	pthread_mutex_unlock(&console_mutex);
	pthread_cond_signal(&lives_cv);
	pthread_exit(NULL);
}

void *spanRow1()
{
	while(!gameOver)
	{
		struct logInfo *logInformation;
		logInformation = malloc(sizeof(struct logInfo));
		logInformation->logRow=16;
		logInformation->logCol=-21;
		logInformation->logDirection=1;
		logInformation->numOfTicks=6;
		logInformation->offscreen=0;		
		pthread_t logRow1Thread;
		int rc = pthread_create(&logRow1Thread, NULL, drawLog, logInformation);
		 if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		 }
		 sleepTicks(200);
		 sleepTicks(rand()%200);
		 free(logInformation);
	}
	
	pthread_exit(NULL);
}

//spans logs for row 2
void *spanRow2()
{
	while(!gameOver)
	{
		struct logInfo *logInformation;
		logInformation = malloc(sizeof(struct logInfo));
		logInformation->logRow=12;
		logInformation->logCol=80;
		logInformation->logDirection=0;
		logInformation->numOfTicks=5;
		logInformation->offscreen=0;	
		pthread_t logRow2Thread;
		int rc = pthread_create(&logRow2Thread, NULL, drawLog, logInformation);
		 if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		 }
		 sleepTicks(200);
		 sleepTicks(rand()%250);
		 free(logInformation);
	}
	pthread_exit(NULL);
}

//spans logs for row 3
void *spanRow3()
{
	while(!gameOver)
	{
		struct logInfo *logInformation;
		logInformation = malloc(sizeof(struct logInfo));
		logInformation->logRow=8;
		logInformation->logCol=-21;
		logInformation->logDirection=1;
		logInformation->numOfTicks=4;
		logInformation->offscreen=0;	
		pthread_t logRow3Thread;
		int rc = pthread_create(&logRow3Thread, NULL, drawLog, logInformation);
		 if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		 }
		 sleepTicks(250);
		 sleepTicks(rand()%200);
		 free(logInformation);		 
	}
	pthread_exit(NULL);
}

//spans logs for row 4
void *spanRow4()
{
	while(!gameOver)
	{
		struct logInfo *logInformation;
		logInformation = malloc(sizeof(struct logInfo));
		logInformation->logRow=4;
		logInformation->logCol=80;
		logInformation->logDirection=0;
		logInformation->numOfTicks=3;
		logInformation->offscreen=0;	
		pthread_t logRow4Thread;
		int rc = pthread_create(&logRow4Thread, NULL, drawLog, logInformation);
		 if (rc){
		   printf("ERROR-return code from pthread_create() is %d\n", rc);
		   exit(-1);
		 }
		 sleepTicks(250);
		 sleepTicks(rand()%200);
		 free(logInformation);			 
	}
	pthread_exit(NULL);
}


//This method reads the inputs from the keyboards and makes the frog move according to the input
void *getCharKeyboard()
{
	
	while(!gameOver)
	{
		fd_set set;
		FD_ZERO(&set);
        FD_SET(STDIN_FILENO, &set);
        struct timespec timeout = getTimeout(1); /* duration of one tick */
        int ret = pselect(FD_SETSIZE, &set, NULL, NULL, &timeout, NULL);
		if(ret!=0)
		{
			sleepTicks(2);		
			char c=getchar();
			pthread_mutex_lock(&keyboard_mutex);
			if(c=='w')
			{
				if(frog_row>0)
				{								
					if(frog_row==5)
					{
						if((1<=frog_col  && frog_col<=5))
						{
							if(liveCounter[0]!=1)
							{
								updateFrogRow(frog_row-3);
								liveCounter[0]=1;
							}
						}
						else if((19<=frog_col  && frog_col<=23))
						{
							
							if(liveCounter[1]!=1)
							{
								updateFrogRow(frog_row-3);
								liveCounter[1]=2;
							}
						}
						else if((37<=frog_col  && frog_col<=41))
						{
							if(liveCounter[2]!=1)
							{
								updateFrogRow(frog_row-3);
								liveCounter[2]=1;
							}
						}
						else if((55<=frog_col  && frog_col<=59))
						{
							if(liveCounter[3]!=1)
							{
								updateFrogRow(frog_row-3);
								liveCounter[3]=1;
							}
						}
						else if((73<=frog_col  && frog_col<=77))
						{
							if(liveCounter[4]!=1)
							{
								updateFrogRow(frog_row-3);
								liveCounter[4]=1;
							}
						}
					}
					else if(frog_row>2)
					{
						updateFrogRow(frog_row-4);	
					}				
				}			
			}
			else if(c=='a')
			{
				if(frog_col==1)
				{
					updateFrogCol(frog_col-1);
				}
				else if(frog_col>0)
				{
					updateFrogCol(frog_col-2);
				}
			}
			else if(c=='s')
			{
				if(frog_row==2)
				{
					updateFrogRow(frog_row+3);
				}
				else if(frog_row<=17)
				{
					updateFrogRow(frog_row+4);
				}
			}
			else if(c=='d')
			{
				if(frog_col==77)
				{
					updateFrogCol(frog_col+1);
				}
				else if(frog_col<78)
				{
					updateFrogCol(frog_col+2);
				}
			}
			pthread_mutex_unlock(&keyboard_mutex);
		}
		else if(ret==-1)
		{
			printf("ERROR-return code from pselect is %d\n", ret);
		    exit(-1);
		}
	}
	consoleFinish();        
	pthread_exit(NULL);
}


//=============================File: list.c======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ìfroggerî.
//
//-----------------------------------------


#include "list.h"

//adds a logstruct to the linked list 
void add(struct logTiles *log,pthread_t pthreadId)
{
	struct node *temp;
    temp=(struct node *)malloc(sizeof(struct node));
    temp->logStruct=log;
	temp->pthreadJoiner=pthreadId;
    if (head== NULL)
    {
		head=temp;
		head->next=NULL;
    }
    else
    {
		temp->next=head;
		head=temp;
    }
}

//checks whether the player has already won or not
int hasWon()
{
	int i;
	int result=1;
	for(i=0;i<sizeof(liveCounter)/sizeof(liveCounter[0]) && result;i++)
	{
		if(liveCounter[i]==0)
		{
			result=0;
		}
	}
	return result;
}

//This function removes the deadlogs that have gone offscreen and also joins the log threads that are off screen.
void removeDeadLogs()
{
	struct node *temp=head;
	struct node *prev=temp;
	int rc;
	while(temp!=NULL)
	{
		if(temp!=NULL && temp->next==NULL && temp->logStruct->offscreen==1)
		{
			pthread_mutex_lock(&join_mutex);		
			rc = pthread_join(temp->pthreadJoiner, NULL);
			pthread_mutex_unlock(&join_mutex);								
			free(temp->logStruct);
			prev->next=temp->next;			
			free(temp);
			temp=NULL;
		}
		else if(temp!=NULL && temp->next!=NULL && temp->logStruct->offscreen==1)
		{						
			pthread_mutex_lock(&join_mutex);		
			rc = pthread_join(temp->pthreadJoiner, NULL);
			pthread_mutex_unlock(&join_mutex);								
			free(temp->logStruct);
			prev->next=temp->next;			
			free(temp);
			temp=prev->next;
		}
		else
		{
			prev=temp;
			temp=temp->next;	
		}
	}	
}

//cleans up the remaining logs after the game has ended
void cleanUp()
{
	struct node *temp=head;	
	int rc;
	while(temp!=NULL)
	{		
		pthread_mutex_lock(&join_mutex);		
		rc = pthread_join(temp->pthreadJoiner, NULL);
		pthread_mutex_unlock(&join_mutex);								
		free(temp->logStruct);			
		free(temp);					
		temp=temp->next;
	}	
}

//checks if the frogs position is in a log or in the water or not.
int validPosition()
{
	int result=0;	//will return 0 if the position of the frog is in a deadzone, 
					//return 1 if it's in any of the logs or in the start row
					//return 2 if the frog is in one of its home position
	struct node *temp=head;
	int logRow;
	int logCol;
	if(frog_row==2 )
	{
		if((1<=frog_col  && frog_col<=5))
		{
			result=2;
			liveCounter[0]=1;
		}
		else if((19<=frog_col  && frog_col<=23))
		{
			result=2;
			liveCounter[1]=1;
		}
		else if((37<=frog_col  && frog_col<=41))
		{
			result=2;
			liveCounter[2]=1;
		}
		else if((55<=frog_col  && frog_col<=59))
		{
			result=2;
			liveCounter[3]=1;
		}
		else if((73<=frog_col  && frog_col<=77))
		{
			result=2;
			liveCounter[4]=1;
		}		
	}	
	if(frog_row==21 && 0<=frog_col<=78)
	{		
		result=1;
	}
	while(temp!=NULL && !result)
	{
		logRow=temp->logStruct->logRow;
		logCol=temp->logStruct->logCol;			
		if(frog_row>=logRow && frog_row<=logRow+3 && frog_col>=logCol && frog_col<=logCol+20)
		{			
			result=1;
		}
		temp=temp->next;		
	}
	return result;
}

//=============================File: log.c======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------


#include"log.h"

void *drawLog(void *info)
{
	setUpLog();
	struct logInfo *logInfo=info;
	logs *logStructAccessor=malloc(sizeof(logs));
	
	logStructAccessor->logRow=logInfo->logRow;
	logStructAccessor->logCol=logInfo->logCol;
	logStructAccessor->direction=logInfo->logDirection;
	logStructAccessor->numOfTicks=logInfo->numOfTicks;
	logStructAccessor->offscreen=logInfo->offscreen;
	
	add(logStructAccessor,pthread_self());
	
	int logRow=logStructAccessor->logRow;
	int logCol=logStructAccessor->logCol;
	int ticks=logStructAccessor->numOfTicks;
	int direction=logStructAccessor->direction;
	int isOffscreen=logStructAccessor->offscreen;
	
	int k=0;
	while(!(isOffscreen))
	{
		int i;
		for (i = 0; i<LOG_ANIM_TILES; i++)
		{
			int j;
			for(j=0;j<4;j++)
			{
				pthread_mutex_lock(&console_mutex);	
				char** tile = log[i];				
				consoleClearImage(logRow,logCol,LOG_HEIGHT,strlen(tile[0]));
				if(direction==1)
				{				
					logStructAccessor->logCol=logStructAccessor->logCol+1;
				}
				else
				{
					logStructAccessor->logCol=logStructAccessor->logCol-1;
				}
				logCol=logStructAccessor->logCol;				
				consoleDrawImage(logRow,logCol,tile,LOG_HEIGHT);		
				if(frog_row>=logRow && frog_row<=logRow+3 && frog_col>=logCol && frog_col<=logCol+20)
				{
					if(frog_col<=78 && frog_col>=0)
					{
						consoleDrawImage(frog_row, frog_col, PLAYER_GRAPHIC[k], PLAYER_HEIGHT);
						if(direction==1)
						{
							if(frog_col!=78)
							{
								updateFrogCol(frog_col+1);
							}
						}
						else
						{
							if(frog_col!=0)
							{
								updateFrogCol(frog_col-1);
							}
						}
						
					}
				}
				if(direction==1)
				{
					if(logCol>=80)
					{
						isOffscreen=1;
					}
				}
				else
				{
					if(logCol==-21)
					{
						isOffscreen=1;
					}
				}
				pthread_mutex_unlock(&console_mutex);				
				sleepTicks(ticks);				
			}
			k=(k+1)%2;
		}		
	}	
	pthread_exit(NULL);
}



void setUpLog()
{
	pthread_mutexattr_settype(&log_row_attributes, PTHREAD_MUTEX_RECURSIVE);
    pthread_mutex_init(&log_row_mutex, &log_row_attributes);
}


//=============================File: main.c======================================

//-----------------------------------------
// NAME: Nibrasul Islam Ohin
// STUDENT NUMBER: 7763314
// COURSE: COMP 3430, SECTION: A02
// INSTRUCTOR: Jim Young
// ASSIGNMENT: Assignment 2
//
// REMARKS: Implementing the text version of the classic video game ‚Äúfrogger‚Äù.
//
//-----------------------------------------


#include <stdlib.h>
#include "gameController.h"

int main(int argc, char**argv) 
{	
	startTheGame();
	printf("\ndone!");
	fflush(stdout);
	return 0;
}

